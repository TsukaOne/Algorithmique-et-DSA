#Quand on fait appel à un système de récursion trop large il faut augmenter la limite classique
import sys
sys.setrecursionlimit(2000)

class Solution:
    
    def insert_bottom(self,St, temp1):
        if len(St)==0:
            St.append(temp1)
        else:
            temp2 = St.pop()
            self.insert_bottom(St,temp1)
            St.append(temp2)
    
    def reverse(self,St): 
        if len(St)!=0:
            temp = St.pop()
            self.reverse(St)
            self.insert_bottom(St,temp)



x = "74 320 55 604 514 571 857 834 377 44 904 184 726 640 97 414 30 925 645 889 152 752 756 278 929 858 69 31 905 148 219 259 30 528 144 465 743 10 431 581 549 455 773 886 950 76 776 399 347 698 940 27 131 952 202 230 712 257 195 154 290 455 53 464 81 112 227 288 743 121 386 49 477 904 234 516 926 429 163 981 50 3 761 484 37 739 666 636 80 386 726 361 726 316 270 135 171 57 913 984 401 311 755 38 451 719 496 90 942 52 177 507 653 553 421 883 597 754 923 350 505 846 885 156 727 395 615 681 612 498 681 51 820 148 898 155 661 541 335 135 198 224 227 216 498 835 336 663 754 260 77 429 595 315 305 699 252 818 928 14 780 811 188 407 554 360 662 442 597 553 702 909 950 385 49 691 531 649 97 385 438 985 25 433 22 484 25 733 477 107 536 550 651 452 193 789 138 676 920 977 346 251 726 178 830 439 98 181 223 340 704 265 256 586 615 425 755 886 726 659 331 781 328 672 497 654 169 357 20 680 336 809 828 676 174 671 222 915 390 974 950 562 31 103 800 109 790 975 896 603 728 693 652 448 911 806 263 496 924 550 400 650 293 490 27 178 151 164 726 340 430 326 384 286 123 818 110 69 215 849 614 490 758 475 497 949 454 806 115 66 441 538 694 332 39 307 63 192 8 321 855 867 514 997 797 253 903 220 210 671 113 88 678 251 953 228 674 51 149 801 663 69 112 999 998 861 7 286 352 387 666 461 407 342 729 714 293 289 464 699 36 517 197 236 918 135 88 530 136 451 211 423 273 680 970 806 392 70 957 953 910 53 221 721 327 543 420 246 576 297 777 304 812 134 507 37 536 165 580 843 353 771 344 271 451 459 687 415 172 717 904 573 817 21 944 358 544 710 186 561 646 422 216 667 370 282 34 274 795 445 484 520 479 797 813 219 996 975 342 634 314 492 889 914 289 899 212 49 968 705 420 363 639 654 566 540 367 346 98 932 790 624 801 497 648 777 674 569 843 107 656 927 11 779 976 944 838 608 576 757 193 626 306 164 755 531 482 330 65 405 44 268 451 428 635 598 910 349 934 202 458 815 757 109 973 352 19 438 809 915 229 633 26 193 515 139 259 669 332 494 785 236 936 271 73 596 729 230 599 619 930 430 672 836 180 117 289 453 597 606 144 829 770 412 490 588 512 738 781 691 286 448 456 5 165 904 248 709 540 226 197 618 22 69 917 448 333 471 800 250 380 694 388 972 672 951 59 693 16 911 19 301 989 120 829 114 380 166 936 897 859 234 935 3 825 438 921 782 33 115 329 301 993 151 150 978 815 226 724 779 75 347 35 747 964 398 263 123 253 488 929 63 655 22 957 197 979 595 780 739 736 808 379 400 155 697 869 791 22 565 85 583 923 469 959 357 137 217 640 982 711 343 315 960 535 14 695 248 917 330 654 769 841 200 904 499 539 787 352 201 685 952 798 464 654 207 981 4 540 171 286 109 242 707 318 114 516 986 957 365 559 708 71 167 85 825 607 940 376 615 937 474 677 186 431 550 316 455 663 336 150 970 979 615 823 220 995 368 485 297 71 754 384 224 856 237 915 804 103 301 691 107 631 25 438 492 768 57 286 614 396 847 351 679 246 773 222 98 696 103 507 196 813 482 129 184 199 364 348 377 530 85 227 696 433 511 888 911 577 202 428 356 404 811 630 714 527 246 230 756 374 553 54 587 639 610 553 90 357 475 112 440 935 421 57 318 17 899 281 368 538 824 629 785 975 811 652 146 478 466 896 115 118 189 701 422 525 60 441 952 955 811 574 704 350 436 509 876 814 469 52 914 851 996 570 813 533 976 488 633 275 953 59 831 774 331 201 76 360 983 601 512 143 922 743 770 255 882 398 780 624 814 503 716 397 180 954 783 798 281 315 949 702 460 584 296 96 844 481 511 246 459 632 786 211 138 266 127 114 975 637 404 615 836 650 293 502 538 742 80 322 942 21 527 367 666 590 174 362 903 574 573 504 961 854 760 277 867 199 844 304 860 321 933 252 985 847 54 248 158 685 824 257 23 829 847 487 412 990 97 222 228 919 463 207 424 917 384 527 59 240 116 719 840 411 447 829 485 851 759 625 286 24 335 355 133 675 348 332 232 720 432 923 851 365 501 569 944 490 652 976 748 723 790 936 916 50 370 243 407 601 288 379 636 326 205 200 191 64 984 551 825 203 52 240 349 400 127 792 82 968 522 776 205 696 297 748 246 247 21 "

St = list(map(int, x.split()))
ob = Solution()
print(St)
ob.reverse(St)
print(St)

            